package guiaTV;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.InputMismatchException;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.SortedSet;
import java.util.TreeSet;

/**
 * Clase para mantener información sobre la parrilla de TV de varias cadenas de televisión.
 * La información se organizará como una correspondencia entre el nombre de cada cadena (String), y 
 * una colección ordenada de programas de TV emitidos por dicha cadena. 
 * 
 * @author POO
 *
 */
public class ParrillaTV {
	/**
	 * Estructura para almacenar los programas (ordenados según su hora de inicio), y asociados 
	 * a la cadena (String) en los que se emiten.
	 */
	protected Map<String, SortedSet<ProgramaTV>> canales;
	
	/**
	 * Constructor para crear parrillas de TV, inicialmente vacías.
	 */
	public ParrillaTV() {
		canales = new HashMap<String,SortedSet<ProgramaTV>>();
	}
	
	/** 
	 * Constructor para crear parrillas de TV a partir de la información contenida en un 
	 * fichero de texto. Utiliza el método auxiliar leeParrilla(String)
	 * 
	 * @param fichero	Nombre del fichero de texto con información sobre programas
	 * @throws FileNotFoundException
	 */
	public ParrillaTV(String fichero) throws FileNotFoundException {
		this();
		leeParrilla(fichero);
	}

	/**
	 * Método para leer los datos de un fichero de texto con información sobre programas, e
	 * incorporarlos a la estructura que almacena la parrilla de TV.
	 * 
	 * @param fichero	Nombre del fichero de texto con la información
	 * @throws FileNotFoundException
	 */
	public void leeParrilla(String fichero) throws FileNotFoundException {
		Scanner scFichero = new Scanner(new File(fichero));
		leeParrilla(scFichero);
		scFichero.close();
	}

	/**
	 * Método para incorporar a la correspondencia canales (Map) los programas que se leen del scanner sc
	 * El formato de las líneas del scanner ha de ser el siguiente:
	 * 		Nombre de la cadena>Nombre del programa@hh:mm-minutos
	 * En caso de que el formato sea incorrecto, se lanzará una excepción.
	 * 
	 * @param sc	Scanner con la información sobre cadenas y programas.
	 */
	public void leeParrilla(Scanner sc) {
		while (sc.hasNextLine()) {
			String linea = sc.nextLine();
			Scanner scLinea = new Scanner(linea);
			scLinea.useDelimiter("[>@:-]+");
			try {
				String nombreCadena = scLinea.next();
				String nombrePrograma = scLinea.next();
				
				int hh = scLinea.nextInt();
				int mm = scLinea.nextInt();
				
				int duracion = scLinea.nextInt();
				
				Hora horaInicio = new Hora(hh,mm);
				ProgramaTV prog = new ProgramaTV(nombrePrograma,horaInicio,duracion);
				
				anyadir(nombreCadena,prog);
			} catch (InputMismatchException ime) {
				throw new ProgramacionTVException("La hora o la duración del programa descrito en la línea " +
											linea + " no tienen formato númérico correcto");
			} catch (NoSuchElementException nsee) {
				throw new ProgramacionTVException("El formato de la línea: " + linea + " no es correcto");
			} catch (ProgramacionTVException pe) {
				String mensaje = pe.getMessage();
				// Recuperamos el mensaje, de la excepción cuando la hora, los minutos o la duración
				// son incorrectos, y enriquecemos el mensaje de la excepción, añadiendo la línea 
				// donde se ha producido el error.
				throw new ProgramacionTVException(mensaje + " en la línea " + linea);
			} finally {
				scLinea.close();
			}
		
		}
	}
	
	/**
	 * Se añade a la cadena proporcionada como primer argumento, el programa que se pasa como 
	 * segundo argumento. 
	 * 
	 * @param cadenaTV	Nombre de la cadena
	 * @param prog		Programa a añadir a la parrilla de esa cadena
	 */
	public void anyadir(String cadenaTV, ProgramaTV prog) {
		SortedSet<ProgramaTV> programas = canales.get(cadenaTV);
		if (programas == null) {
			programas = new TreeSet<ProgramaTV>(new OrdenProgramaTVPorInicio());
			canales.put(cadenaTV, programas);
		}
		programas.add(prog);
	}
	
	/** 
	 * Método que indica si la parrilla de una cadena determinada (argumento) es consistente.
	 * Una parrilla es consistente cuando ningún programa tiene una hora de finalización posterior a la
	 * hora de inicio del siguiente programa. En caso de que la cadena de TV no esté en la parrilla, se
	 * lanzará una excepción ProgramacionTVException.
	 * 
	 * @param cadenaTV	Nombre de la cadena a comprobar
	 * @return			true si la parrilla es consistente y false en caso contrario
	 */
	public boolean esConsistente(String cadenaTV) {
		boolean consistente = true;
		SortedSet<ProgramaTV> programas = canales.get(cadenaTV);
		if (programas == null) throw new ProgramacionTVException("La cadena de TV indicada no aparece en la parrilla");
		Iterator<ProgramaTV> it = programas.iterator();
		ProgramaTV prog = null;
		if (!it.hasNext()) throw new ProgramacionTVException("No hay programas asociados a la cadena" + cadenaTV);
		prog = it.next();
		while (it.hasNext() && consistente) {
			ProgramaTV progSiguiente = it.next();
			consistente = prog.getHoraFin().compareTo(progSiguiente.getHoraInicio()) <= 0;
		}
		return consistente;
	}
	
	/**
	 * Método que muestra la información de la parrilla en el fichero que se pasa como argumento
	 * @param fichero	Nombre del fichero donde se mostrará la parrilla
	 * @throws FileNotFoundException
	 */
	public void mostrarParrilla(String fichero) throws FileNotFoundException {
		PrintWriter pwFichero = new PrintWriter(fichero);
		mostrarParrilla(pwFichero);
		pwFichero.close();
	}

	/**
	 * Muestra sobre el flujo de salida que se pasa como argumento la información de la 
	 * parrilla televisiva, con el siguiente formato:
	 * Nombre de la cadena1:
	 * 		Programa11
	 * 		Programa12
	 * 		...
	 * 		Programa1N1
	 * Nombre de la cadena2:
	 * 		Programa21
	 * 		Programa22
	 * 		...
	 * 		Programa2N2
	 * ...
	 * 
	 * @param pwFichero
	 */
	public void mostrarParrilla(PrintWriter pwFichero) {
		for (String cadenaTV : canales.keySet()) {
			pwFichero.println(cadenaTV + ":");
			for (ProgramaTV prog : canales.get(cadenaTV)) {
				pwFichero.println("\t" + prog);
			}
		}
	}
	
}
